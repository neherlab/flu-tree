from datetime import datetime

wildcard_constraints:
    flu_type="[AB]",
    segment="\d",
    year="\d\d\d\d",
    strain="[^_/]+",
    segment_name = "[^_/]+",
    reference = "[^_/]+"

def segment_number(segment_name):
    return "4"

rule download_clades:
    message: "Downloading clade definitions for {wildcards.strain} from {params.source} -> {output}"
    output:
        "data/clades_{strain}_{segment_name}_{reference}_raw.tsv"
    params:
        source = lambda w: config["builds"][w.strain][w.segment_name][w.reference]["clade_url"]
    shell: "curl {params.source} | sed '/V1A\\tHA1\\t146\\tI/d' >{output}"

rule offset_clades:
    input: rules.download_clades.output
    output:
        "data/clades_{strain}_{segment_name}_{reference}.tsv"
    params:
        offset = lambda w: config["builds"][w.strain][w.segment_name][w.reference]["clade_offset"]
    shell:
        """
        perl -F'\\t' -ne \
            '$F[2]+={params.offset} if $F[1] =~ "nuc"; \
            print join "\\t", @F' \
            {input} \
            >{output}
        """

rule download_includes:
    output:
        "data/includes_{strain}_{segment_name}_{reference}.tsv"
    params: 
        source = lambda w: config["builds"][w.strain][w.segment_name][w.reference]["include_url"]
    shell: "curl {params.source} >{output}"

rule download:
    output: temp("data/download_{flu_type}_{segment_name}_{year}.fasta")
    params: segment_number = lambda w: segment_number(w.segment_name)
    shell:
        "curl -ksSL -o {output} "
        "'https://www.viprbrc.org/brc/api/sequence?"
        "datatype=genome&"
        "completeseq=N&"
        "family=influenza&"
        "flutype={wildcards.flu_type}&"
        "fromyear={wildcards.year}&"
        "toyear={wildcards.year}&"
        "segment={params.segment_number}&"
        "host=human&"
        "metadata=continent,country,date,fluSeason,fluType,host,length,state,strainName&"
        "output=fasta'"

rule clean_download:
    input: "data/download_{flu_type}_{segment_name}_{year}.fasta"
    output: temp("data/cleaned_download_{flu_type}_{segment_name}_{year}.fasta")
    shell:
        """
        if [ $(wc -l < {input}) -lt 2 ]
        then
            touch {output}
        else
            cp {input} {output}
        fi
        """

rule join_downloads:
    input:
        expand("data/cleaned_download_{{flu_type}}_{{segment_name}}_{year}.fasta",year=range(1989,2022))
    output: "data/download_{flu_type}_{segment_name}.fasta"
    shell: "cat {input} >> {output}"

rule parse:
    input:
        sequences = "data/download_{flu_type}_{segment_name}.fasta"
    output:
        metadata = "data/{flu_type}_{segment_name}_metadata.tsv",
        sequences = "data/{flu_type}_{segment_name}_sequences.fasta"
    params:
        fields = "ncbiAcc continent country date fluSeason fluType host length state strainName"
    shell:
        """
        augur parse \
            --sequences {input.sequences} \
            --fields {params.fields} \
            --output-metadata {output.metadata} \
            --output-sequences {output.sequences}
        """

genes = ["SigPep","HA1","HA2"]

def flu_type(strain):
    if strain in ["vic","yam"]:
        return "B"
    return "A"

rule prealign:
    input:
        sequences = lambda w: f"data/{flu_type(w.strain)}_{w.segment_name}_sequences.fasta",
        genemap = "references/{strain}/{segment_name}/{reference}/genemap.gff",
        reference = "references/{strain}/{segment_name}/{reference}/reference.fasta",
    output:
        alignment = "pre-processed/{strain}/{segment_name}/{reference}/prealign.aligned.fasta",
        insertions = "pre-processed/{strain}/{segment_name}/{reference}/prealign.insertions.csv",
    params:
        outdir = "pre-processed/{strain}/{segment_name}/{reference}",
    threads: 6
    shell:
        """
        nextalign \
            --reference {input.reference} \
            --genemap {input.genemap} \
            --genes=SigPep,HA1,HA2 \
            --sequences {input.sequences} \
            --output-dir {params.outdir} \
            --jobs {threads} \
            --verbosity error \
            --output-basename prealign > /dev/null
        """

rule mutation_summary:
    message: "Summarizing {input.alignment}"
    input:
        alignment = rules.prealign.output.alignment,
        insertions = rules.prealign.output.insertions,
        genemap = "references/{strain}/{segment_name}/{reference}/genemap.gff",
        reference = "references/{strain}/{segment_name}/{reference}/reference.fasta",
    output:
        mutation_summary = "pre-processed/{strain}/{segment_name}/{reference}/mutation_summary.tsv"
    params:
        outdir = "pre-processed/{strain}/{segment_name}/{reference}",
    shell:
        """
        python3 scripts/mutation_summary.py \
            --alignment {input.alignment} \
            --insertions {input.insertions} \
            --directory {params.outdir} \
            --basename mutation_summary \
            --reference {input.reference} \
            --genes=SigPep,HA1,HA2 \
            --genemap {input.genemap} \
            --output {output.mutation_summary} > /dev/null
        """

# TODO: Add nextclade QC/clade output to enriched metadata script
# TODO: Need to filter out sequences that fail to translate using nextclade, easy by running nextclade on it
# - Deduplicate strains (sort of randomly, could be improved by filtering out egg etc.)
rule enrich_metadata:
    input:
        metadata = lambda w: f"data/{flu_type(w.strain)}_{w.segment_name}_metadata.tsv",
        mutation_summary = "pre-processed/{strain}/{segment_name}/{reference}/mutation_summary.tsv",
    output:
        enriched_metadata = "pre-processed/{strain}/{segment_name}/{reference}/metadata_enriched.tsv"
    shell:
        """
        python3 scripts/metadata_enrichment.py \
            --metadata-path {input.metadata} \
            --mutation-summary-path {input.mutation_summary} \
            --output-path {output.enriched_metadata} \
            --reference-accession {wildcards.reference} \
            > /dev/null
        """

rule generate_include_accessions:
    input: 
        strain_names = "data/includes_{strain}_{segment_name}_{reference}.tsv",
        enriched_metadata = "pre-processed/{strain}/{segment_name}/{reference}/metadata_enriched.tsv",
    output: "data/include_accessions_{strain}_{segment_name}_{reference}.txt"
    shell:
        """
        python3 scripts/generate_include_accessions.py \
            --strain-names-path {input.strain_names} \
            --enriched-metadata-path {input.enriched_metadata} \
            --output-path {output}
        """


rule subsample:
    input:
        aligned_sequences = "pre-processed/{strain}/{segment_name}/{reference}/prealign.aligned.fasta",
        enriched_metadata = "pre-processed/{strain}/{segment_name}/{reference}/metadata_enriched.tsv",
        include_accessions = "data/include_accessions_{strain}_{segment_name}_{reference}.txt",
    output:
        sampled_sequences = "build/{strain}/{segment_name}/{reference}/subsample_raw.fasta",
        sampled_strains = "build/{strain}/{segment_name}/{reference}/subsample_raw.txt",
    params:
        filter_arguments = lambda w: config["builds"][w.strain][w.segment_name][w.reference]["filter"]
    shell:
        """
        augur filter \
            --sequences {input.aligned_sequences} \
            --metadata {input.enriched_metadata} \
            --include {input.include_accessions} \
            --include-where ncbiAcc={wildcards.reference} \
            {params.filter_arguments} \
            --output {output.sampled_sequences} \
            --output-strains {output.sampled_strains} \
            > /dev/null
        """

rule exclude_outliers:
    input:
        sequences = rules.subsample.output.sampled_sequences,
        enriched_metadata = "pre-processed/{strain}/{segment_name}/{reference}/metadata_enriched.tsv",
        exclude = "profiles/exclude.txt",
    output:
        sampled_sequences = "build/{strain}/{segment_name}/{reference}/subsample.fasta",
        sampled_strains = "build/{strain}/{segment_name}/{reference}/subsample.txt",
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.enriched_metadata} \
            --exclude {input.exclude} \
            --include-where ncbiAcc={wildcards.reference} \
            --min-date 2016 \
            --output {output.sampled_sequences} \
            --output-strains {output.sampled_strains} \
            > /dev/null
        """

rule tree:
    message: "Building tree"
    input:
        alignment = rules.exclude_outliers.output.sampled_sequences
    output:
        tree = "build/{strain}/{segment_name}/{reference}/tree_raw.nwk"
    params:
        args = lambda w: config["tree"].get("tree-builder-args","") if "tree" in config else ""
    threads: 6
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --tree-builder-args {params.args} \
            --output {output.tree} \
            --nthreads {threads} \
            > /dev/null
        """

rule refine:
    message:
        """
        Refining tree
        """
    input:
        tree = rules.tree.output.tree,
        alignment = rules.exclude_outliers.output.sampled_sequences,
        enriched_metadata = "pre-processed/{strain}/{segment_name}/{reference}/metadata_enriched.tsv",
    output:
        tree = "build/{strain}/{segment_name}/{reference}/tree.nwk",
        node_data = "build/{strain}/{segment_name}/{reference}/branch_lengths.json"
    threads: 1
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.enriched_metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --root {wildcards.reference} \
            --divergence-unit mutations-per-site \
            > /dev/null
        """

rule ancestral:
    message:
        """
        Reconstructing ancestral sequences and mutations
          - inferring ambiguous mutations
        """
    input:
        tree = rules.refine.output.tree,
        alignment = rules.exclude_outliers.output.sampled_sequences,
    output:
        node_data = "build/{strain}/{segment_name}/{reference}/nt_muts.json"
    params:
        inference = "joint"
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --inference {params.inference} \
            --infer-ambiguous \
            > /dev/null
        """

rule aa_muts_explicit:
    message: "Translating amino acid sequences"
    input:
        tree = rules.refine.output.tree,
        genemap = "references/{strain}/{segment_name}/{reference}/genemap.gff",
        reference = "references/{strain}/{segment_name}/{reference}/reference.fasta",
    output:
        node_data = "build/{strain}/{segment_name}/{reference}/aa_muts_explicit.json",
    params:
        genes = ["SigPep","HA1","HA2"],
        translations = lambda w: expand("pre-processed/{strain}/{segment_name}/{reference}/prealign.gene.{genes}.fasta",strain=w.strain,segment_name=w.segment_name,genes=["SigPep","HA1","HA2"],reference=w.reference),
    shell:
        """
        python3 scripts/explicit_translation.py \
            --tree {input.tree} \
            --annotation {input.genemap} \
            --reference {input.reference} \
            --translations {params.translations:q} \
            --genes {params.genes} \
            --output {output.node_data} \
            > /dev/null
        """

rule clades:
    message: "Adding internal clade labels"
    input:
        tree = rules.refine.output.tree,
        aa_muts = rules.aa_muts_explicit.output.node_data,
        nuc_muts = rules.ancestral.output.node_data,
        clades = rules.offset_clades.output
    output:
        node_data = "build/{strain}/{segment_name}/{reference}/clades.json"
    resources:
        # Memory use scales primarily with size of the node data.
        mem_mb=lambda wildcards, input: 3 * int(input.size / 1024 / 1024)
    shell:
        """
        augur clades --tree {input.tree} \
            --mutations {input.nuc_muts} {input.aa_muts} \
            --clades {input.clades} \
            --output-node-data {output.node_data} \
            > /dev/null
        """

def node_data(w):
    nodes = ['ancestral','refine','aa_muts_explicit']
    if w.segment_name == "ha":
        nodes.extend(['clades'])
    return nodes

rule export:
    message: "Exporting data files for auspice"
    input:
        tree = rules.refine.output.tree,
        metadata = rules.enrich_metadata.output.enriched_metadata,
        node_data = lambda w: [rules.__dict__[rule].output.node_data for rule in node_data(w)],
        auspice_config = lambda w: config['files']['auspice_config']
    output:
        auspice_json = "auspice/{strain}/{segment_name}/{reference}/auspice_raw.json",
    params:
        fields = "continent fluSeason strainName" #deleted country"
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.node_data}\
            --auspice-config {input.auspice_config} \
            --color-by-metadata {params.fields} \
            --output {output.auspice_json} 2>&1;
        """

rule swap_strain_accession:
    input:
        auspice_json = "auspice/{strain}/{segment_name}/{reference}/auspice_raw.json",
    output:
        auspice_json = "auspice/{strain}/{segment_name}/{reference}/auspice.json",
    shell:
        """
        python3 scripts/swap_strain_accession.py \
            --tree-input-path {input.auspice_json} \
            --tree-output-path {output.auspice_json}
        """

#use segment name rather than no all the way through to make things easier
rule generate_sample_sequences:
    input:
        sequences = lambda w: f"data/{flu_type(w.strain)}_{w.segment_name}_sequences.fasta",
        metadata = "pre-processed/{strain}/{segment_name}/{reference}/metadata_enriched.tsv",
    output:
        sequences = "build/{strain}/{segment_name}/{reference}/sample_sequences.fasta",
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --min-date 2020 --query 's1_dist<120.0' --group-by s1_dist year --subsample-max-sequences 50  \
            --exclude-ambiguous-dates-by year \
            --probabilistic-sampling \
            --output {output.sequences}
        """

# make segment_no function
rule assemble_folder:
    input:
        genemap = "references/{strain}/{segment_name}/{reference}/genemap.gff",
        reference = "references/{strain}/{segment_name}/{reference}/reference.fasta",
        sample_sequences = "build/{strain}/{segment_name}/{reference}/sample_sequences.fasta",
        tree = "auspice/{strain}/{segment_name}/{reference}/auspice.json",
        qc = "profiles/qc.json",
        tag = "profiles/tag.json",
        primers = "profiles/primers.csv",
    output:
        genemap = "output/flu_{strain}_{segment_name}/references/{reference}/versions/{timestamp}/files/genemap.gff",
        primers = "output/flu_{strain}_{segment_name}/references/{reference}/versions/{timestamp}/files/primers.csv",
        qc = "output/flu_{strain}_{segment_name}/references/{reference}/versions/{timestamp}/files/qc.json",
        reference = "output/flu_{strain}_{segment_name}/references/{reference}/versions/{timestamp}/files/reference.fasta",
        sample_sequences = "output/flu_{strain}_{segment_name}/references/{reference}/versions/{timestamp}/files/sequences.fasta",
        tree = "output/flu_{strain}_{segment_name}/references/{reference}/versions/{timestamp}/files/tree.json",
        tag = "output/flu_{strain}_{segment_name}/references/{reference}/versions/{timestamp}/files/tag.json",
    shell:
        """
        mkdir -p output/flu_{wildcards.strain}_{wildcards.segment_name}/references/{wildcards.reference}/versions/{wildcards.timestamp}/files/;
        jq <{input.tag} '.tag="{wildcards.timestamp}"' >{output.tag};
        cp {input.genemap} {output.genemap};
        cp {input.reference} {output.reference};
        cp {input.primers} {output.primers};
        cp {input.qc} {output.qc};
        cp {input.sample_sequences} {output.sample_sequences};
        cp {input.tree} {output.tree};
        """

timestamp = datetime.utcnow().isoformat()[:-7]+'Z'
rule test_nextclade:
    input: expand("output/flu_{{strain}}_{{segment_name}}/references/{{reference}}/versions/{timestamp}/files/tree.json",timestamp=timestamp),
    output: "test/{strain}/{segment_name}/{reference}/nextclade.aligned.fasta"
    params:
        indir = expand("output/flu_{{strain}}_{{segment_name}}/references/{{reference}}/versions/{timestamp}/files",timestamp=timestamp),
        outdir = "test/{strain}/{segment_name}/{reference}"
    shell:
        """
        /Users/cr/code/nextclade/.out/bin/nextclade-MacOS-x86_64 \
         --input-fasta={params.indir}/sequences.fasta\
         --input-root-seq={params.indir}/reference.fasta\
         --genes=SigPep,HA1,HA2\
         --input-qc-config={params.indir}/qc.json\
         --input-gene-map={params.indir}/genemap.gff\
         --input-tree={params.indir}/tree.json\
         --output-dir={params.outdir}\
         --output-tsv={params.outdir}/nextclade.tsv\
         --output-tree={params.outdir}/nextclade.auspice.json\
         --output-basename=nextclade 2>&1
        """
# print(config)
# print(                [f"test/{strain}/{segment_name}/{reference}/nextclade.aligned.fasta" for strain in config["builds"] for segment_name in config["builds"][strain] for reference in config["builds"][strain][segment_name]])
rule all:
    input:
        [f"test/{strain}/{segment_name}/{reference}/nextclade.aligned.fasta" for strain in config["builds"] for segment_name in config["builds"][strain] for reference in config["builds"][strain][segment_name]]

rule clean:
    shell:
        """
        rm -rf output test data/clades* data/include*
        """

rule clean_all:
    shell:
        """
        rm -rf output test auspice build pre-processed data
        """