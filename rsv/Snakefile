build_dir = "builds"

if "timestamp" not in config:
    import datetime

    timestamp = datetime.datetime.utcnow().isoformat()[:-7] + "Z"
else:
    timestamp = config["timestamp"]


rule all:
    input:
        [
            f"test/{a_or_b}/{reference}/nextclade.aligned.fasta"
            for a_or_b in config["builds"]
            for reference in config["builds"][a_or_b]
        ],


rule clean:
    params:
        builds=build_dir,
    shell:
        """
        rm -rf output test data/clades* data/include* {params.builds}
        """


rule clean_all:
    shell:
        """
        rm -rf output test auspice builds data
        """


rule download_clades:
    output:
        G_clades="data/{a_or_b}/{reference}/clades_G_raw.tsv",
        genome_clades="data/{a_or_b}/{reference}/clades_genome_raw.tsv",
        clade_ref="data/{a_or_b}/{reference}/clade_reference.gbk",
    params:
        G_clade="https://raw.githubusercontent.com/nextstrain/rsv/master/config/clades_G_{a_or_b}.tsv",
        genome_clade="https://raw.githubusercontent.com/nextstrain/rsv/master/config/clades_genome_{a_or_b}.tsv",
        ref="https://raw.githubusercontent.com/nextstrain/rsv/master/config/{a_or_b}reference.gbk",
    shell:
        """
        curl {params.G_clade} > {output.G_clades}
        curl {params.genome_clade} > {output.genome_clades}
        curl {params.ref} > {output.clade_ref}
        """


rule download:
    output:
        sequences="data/{a_or_b}/sequences.fasta.xz",
        metadata="data/{a_or_b}/metadata.tsv.gz",
    params:
        metadata_url="http://data.nextstrain.org/files/workflows/rsv/{a_or_b}/metadata.tsv.gz",
        sequence_url="http://data.nextstrain.org/files/workflows/rsv/{a_or_b}/sequences.fasta.xz",
    shell:
        """
        curl -fsSL --compressed {params.metadata_url:q} --output {output.metadata}
        curl -fsSL --compressed {params.sequence_url:q} --output {output.sequences}
        """


rule lift_clades_to_reference:
    input:
        clade_file="data/{a_or_b}/{reference}/clades_{clade_type}_raw.tsv",
        reference="references/{a_or_b}/{reference}/reference.gbk",
        orig_reference="data/{a_or_b}/{reference}/clade_reference.gbk",
    output:
        clade_file="data/{a_or_b}/{reference}/clades_{clade_type}.tsv",
    shell:
        """
        python3 ../common_scripts/clade_translator.py \
            --clades {input.clade_file} \
            --original-reference {input.orig_reference} \
            --new-reference {input.reference} \
            --output-clades {output.clade_file}
        """


rule decompress:
    """decompressing metadata"""
    input:
        metadata="data/{a_or_b}/metadata.tsv.gz",
    output:
        metadata="data/{a_or_b}/metadata.tsv",
    shell:
        """
        gzip --decompress --keep {input.metadata}
        """


rule download_excludes:
    output:
        build_dir + "/{a_or_b}/{reference}/exclude.txt",
    params:
        source=lambda w: config["builds"][w.a_or_b][w.reference]["exclude_url"],
    shell:
        "curl {params.source} >{output}"


rule wrangle_metadata:
    input:
        metadata="data/{a_or_b}/metadata.tsv",
    output:
        metadata="data/{a_or_b}/metadata_by_accession.tsv",
    params:
        strain_id=lambda w: config.get("strain_id_field", "strain"),
    shell:
        """
        python3 scripts/wrangle_metadata.py --metadata {input.metadata} \
                    --strain-id {params.strain_id} \
                    --output {output.metadata}
        """


rule filter:
    """
    filtering sequences
    """
    input:
        sequences="data/{a_or_b}/sequences.fasta.xz",
        reference="references/{a_or_b}/{reference}/reference.gbk",
        metadata="data/{a_or_b}/metadata_by_accession.tsv",
        exclude=build_dir + "/{a_or_b}/{reference}/exclude.txt",
        include="profiles/rsv-{a_or_b}_include.txt",
        exclude_global=config["exclude"],
    output:
        sequences=build_dir + "/{a_or_b}/{reference}/filtered.fasta",
    params:
        filter_arguments=lambda wildcards: config["builds"][wildcards.a_or_b][
            wildcards.reference
        ]["filter"],
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --include {input.include} \
            --exclude {input.exclude} {input.exclude_global}\
            --output {output.sequences} \
            {params.filter_arguments}
        """


rule add_reference:
    input:
        sample=rules.filter.output.sequences,
        reference="references/{a_or_b}/{reference}/reference.fasta",
    output:
        sequences=build_dir + "/{a_or_b}/{reference}/filtered_ref.fasta",
    params:
        first_line=lambda w: f">{w.reference}",
    shell:
        """
        tail -n +2 {input.reference} | \
        cat <(echo {params.first_line:q}) - {input.sample} >{output.sequences}
        """


rule nextalign:
    """
    Aligning sequences to {input.reference}
    """
    input:
        sequences=rules.add_reference.output.sequences,
        reference="references/{a_or_b}/{reference}/reference.fasta",
        genemap="references/{a_or_b}/{reference}/genemap.gff",
    output:
        alignment=build_dir + "/{a_or_b}/{reference}/sequences.aligned.fasta",
    params:
        translations=lambda w: build_dir
        + f"/{w.a_or_b}/{w.reference}/aligned.gene.{{gene}}.fasta",
    threads: 4
    shell:
        """
        nextalign run -j {threads}\
            --reference {input.reference} \
            --output-fasta {output.alignment} \
            --output-translations {params.translations} \
            --genemap {input.genemap} \
            {input.sequences}
        """


rule align:
    """
    Aligning sequences to {input.reference}
    """
    input:
        sequences=rules.add_reference.output.sequences,
        reference="references/{a_or_b}/{reference}/reference.fasta",
    output:
        alignment=build_dir + "/{a_or_b}/{reference}/mafft_aligned.fasta",
    threads: 4
    shell:
        """
        augur align --nthreads {threads} \
            --sequences {input.sequences} \
            --reference-name {wildcards.reference} \
            --output {output.alignment}
        """


rule tree:
    """Building tree"""
    input:
        alignment=rules.align.output.alignment,
    output:
        tree=build_dir + "/{a_or_b}/{reference}/tree_raw.nwk",
    threads: 4
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree} \
            --nthreads {threads}
        """


# root using dates in treetime, use 1500 as sequence length (good enough, doesn't matter)
rule root:
    input:
        tree=rules.tree.output.tree,
        metadata=rules.wrangle_metadata.output.metadata,
    output:
        tree=build_dir + "/{a_or_b}/{reference}/tree_rooted.nwk",
    params:
        outdir=build_dir + "/{a_or_b}/{reference}/tt_out",
    shell:
        """
        treetime clock \
            --tree {input.tree} \
            --sequence-length 1500 \
            --dates {input.metadata} \
            --clock-filter 4 \
            --outdir {params.outdir}
        cp {params.outdir}/rerooted.newick {output.tree}
        """


# refine while keeping the root
rule refine:
    input:
        tree=rules.root.output.tree,
        alignment=rules.align.output.alignment,
        metadata=rules.wrangle_metadata.output.metadata,
    output:
        tree=build_dir + "/{a_or_b}/{reference}/tree.nwk",
        node_data=build_dir + "/{a_or_b}/{reference}/branch_lengths.json",
    threads: 1
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --keep-root \
            --divergence-unit mutations-per-site
        """


rule ancestral:
    """
    Reconstructing ancestral sequences and mutations
        - inferring ambiguous mutations
    """
    input:
        tree=rules.refine.output.tree,
        alignment=rules.align.output.alignment,
    output:
        node_data=build_dir + "/{a_or_b}/{reference}/nt_muts.json",
    params:
        inference="joint",
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --inference {params.inference} \
            --infer-ambiguous \
            > /dev/null
        """


rule aa_muts_explicit:
    "Translating amino acid sequences"
    input:
        translations=rules.nextalign.output.alignment,
        tree=rules.refine.output.tree,
        genemap="references/{a_or_b}/{reference}/genemap.gff",
        reference="references/{a_or_b}/{reference}/reference.fasta",
    output:
        node_data=build_dir + "/{a_or_b}/{reference}/aa_muts_explicit.json",
    params:
        genes=config["genes"],
        translations=lambda w: expand(
            build_dir + "/{a_or_b}/{reference}/aligned.gene.{genes}.fasta",
            a_or_b=w.a_or_b,
            reference=w.reference,
            genes=config["genes"],
        ),
    shell:
        """
        python3 ../common_scripts/explicit_translation.py \
            --tree {input.tree} \
            --annotation {input.genemap} \
            --reference {input.reference} \
            --translations {params.translations:q} \
            --genes {params.genes} \
            --output {output.node_data} \
            > /dev/null
        """

rule old_clades:
    "Adding internal clade labels"
    input:
        tree=rules.refine.output.tree,
        aa_muts=rules.aa_muts_explicit.output.node_data,
        nuc_muts=rules.ancestral.output.node_data,
        clades="data/{a_or_b}/{reference}/clades_{clade_system}.tsv",
    output:
        node_data=build_dir + "/{a_or_b}/{reference}/clades_{clade_system}.json",
    params:
        key=lambda w: config["builds"][w.a_or_b][w.reference]["clades"][
            w.clade_system
        ]["key"],
        label_key=lambda w: config["builds"][w.a_or_b][w.reference]["clades"][
            w.clade_system
        ]["label_key"],
    shell:
        """
        augur clades --tree {input.tree} \
            --mutations {input.nuc_muts} {input.aa_muts} \
            --clades {input.clades} \
            --output-node-data {output.node_data} \
            --membership-name {params.key} \
            --label-name {params.label_key}
        """

rule clades:
    "Adding internal clade labels"
    input:
        tree=rules.refine.output.tree,
        aa_muts=rules.aa_muts_explicit.output.node_data,
        nuc_muts=rules.ancestral.output.node_data,
        clades="profiles/rsv-{a_or_b}_designations.tsv",
    output:
        node_data=build_dir + "/{a_or_b}/{reference}/clades_consortium.json",
    params:
        root = lambda w:config["builds"][w.a_or_b][w.reference]["clades"]["consortium"]["root"],
    shell:
        """
        python3 ../common_scripts/assign_clades.py --tree {input.tree} \
            --metadata {input.clades} \
            --clade-key clade --id-field strain \
            --root-clade {params.root} \
            --output {output.node_data}
        """


rule colors:
    """Constructing colors file"""
    input:
        ordering="profiles/color_ordering_{a_or_b}.tsv",
        color_schemes=config["color_schemes"],
        metadata=rules.wrangle_metadata.output.metadata,
    output:
        colors=build_dir + "/{a_or_b}/{reference}/colors.tsv",
    shell:
        """
        python3 scripts/assign-colors.py \
            --ordering {input.ordering} \
            --color-schemes {input.color_schemes} \
            --metadata {input.metadata} \
            --output {output.colors}
        """


# make sure all differences between the alignment reference and the root are attached as mutations to the root
rule attach_root_mutations:
    input:
        aa_muts=rules.aa_muts_explicit.output.node_data,
        nuc_muts=rules.ancestral.output.node_data,
        translations=rules.nextalign.output.alignment,
        tree=rules.refine.output.tree,
    output:
        aa_muts=build_dir + "/{a_or_b}/{reference}/aa_muts_adapted.json",
        nuc_muts=build_dir + "/{a_or_b}/{reference}/nuc_muts_adapted.json",
    params:
        genes=config["genes"],
        translations=lambda w: expand(
            build_dir + "/{a_or_b}/{reference}/aligned.gene.{genes}.fasta",
            a_or_b=w.a_or_b,
            genes=config["genes"],
            reference=w.reference,
        ),
        reference=lambda w: w.reference,
    shell:
        """
        python3 ../common_scripts/attach_root_mutations.py \
            --tree {input.tree} \
            --translations {params.translations:q} \
            --reference {params.reference} \
            --genes {params.genes} \
            --aa-mutations {input.aa_muts} \
            --nuc-mutations {input.nuc_muts} \
            --output-aa-mutations {output.aa_muts} \
            --output-nuc-mutations {output.nuc_muts}
        """


def get_node_data(w):
    node_data = [
        rules.refine.output.node_data,
        build_dir + "/{a_or_b}/{reference}/aa_muts_adapted.json".format(**w),
        build_dir + "/{a_or_b}/{reference}/nuc_muts_adapted.json".format(**w),
    ]
    for clade_system in config["builds"][w.a_or_b][w.reference]["clades"]:
        node_data.append(
            build_dir
            + "/{a_or_b}/{reference}/clades_{clade_system}.json".format(
                **w, clade_system=clade_system
            )
        )
    return node_data


rule export:
    "Exporting data files for auspice"
    input:
        tree=rules.refine.output.tree,
        metadata=rules.wrangle_metadata.output.metadata,
        node_data=get_node_data,
        auspice_config=lambda w: config["auspice_config"],
        colors=rules.colors.output.colors,
    output:
        auspice_json=build_dir + "/{a_or_b}/{reference}/auspice_raw.json",
    params:
        fields="region strain country date",
        type=lambda w: "A" if w.a_or_b == "a" else "B",
    shell:
        """
        AUGUR_RECURSION_LIMIT=10000 \
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.node_data}\
            --auspice-config {input.auspice_config} \
            --color-by-metadata {params.fields} \
            --colors {input.colors} \
            --title "Nextclade reference tree for RSV-{params.type} with root {wildcards.reference}" \
            --output {output.auspice_json} 2>&1;
        """


def get_labels(w):
    return [
        x["label_key"]
        for x in config["builds"][w.a_or_b][w.reference]["clades"].values()
        if x["label_key"] != "clade_annotation"
    ]


rule fix_clade_labels:
    input:
        auspice_json=rules.export.output.auspice_json,
    output:
        auspice_json=build_dir + "/{a_or_b}/{reference}/auspice_relabeled.json",
    params:
        label_keys=get_labels,
    shell:
        """
        python3 scripts/fix_clade_labels.py --input-auspice-json {input.auspice_json}\
            --label-keys {params.label_keys} --output {output.auspice_json}
        """


rule final_strain_name:
    input:
        auspice_json=rules.export.output.auspice_json,
        metadata=rules.wrangle_metadata.output.metadata,
    output:
        auspice_json="auspice/{a_or_b}/{reference}/tree.json",
    params:
        display_strain_name="strain_original",
    shell:
        """
        python3 ../common_scripts/set_final_strain_name.py \
            --metadata {input.metadata} \
            --input-auspice-json {input.auspice_json} \
            --display-strain-name {params.display_strain_name} \
            --output {output.auspice_json}
        """


rule generate_sample_sequences:
    input:
        sequences="data/{a_or_b}/sequences.fasta.xz",
        metadata=rules.wrangle_metadata.output.metadata,
    output:
        sequences=build_dir + "/{a_or_b}/{reference}/sample_sequences.fasta",
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --min-date 2020 --group-by year --subsample-max-sequences 50  \
            --exclude-ambiguous-dates-by year \
            --probabilistic-sampling \
            --output {output.sequences}
        """


rule assemble_folder:
    input:
        genemap="references/{a_or_b}/{reference}/genemap.gff",
        reference="references/{a_or_b}/{reference}/reference.fasta",
        virus_properties="references/{a_or_b}/{reference}/virus_properties.json",
        sample_sequences=build_dir + "/{a_or_b}/{reference}/sample_sequences.fasta",
        tree="auspice/{a_or_b}/{reference}/tree.json",
        qc="profiles/qc.json",
        tag="profiles/tag.json",
        primers="profiles/primers.csv",
    output:
        genemap="output/rsv_{a_or_b}/references/{reference}/versions/{timestamp}/files/genemap.gff",
        primers="output/rsv_{a_or_b}/references/{reference}/versions/{timestamp}/files/primers.csv",
        virus_properties="output/rsv_{a_or_b}/references/{reference}/versions/{timestamp}/files/virus_properties.json",
        qc="output/rsv_{a_or_b}/references/{reference}/versions/{timestamp}/files/qc.json",
        reference="output/rsv_{a_or_b}/references/{reference}/versions/{timestamp}/files/reference.fasta",
        sample_sequences="output/rsv_{a_or_b}/references/{reference}/versions/{timestamp}/files/sequences.fasta",
        tree="output/rsv_{a_or_b}/references/{reference}/versions/{timestamp}/files/tree.json",
        tag="output/rsv_{a_or_b}/references/{reference}/versions/{timestamp}/files/tag.json",
    shell:
        """
        jq <{input.tag} '.tag="{wildcards.timestamp}"' >{output.tag};
        cp {input.genemap} {output.genemap};
        cp {input.reference} {output.reference};
        cp {input.primers} {output.primers};
        cp {input.virus_properties} {output.virus_properties};
        cp {input.qc} {output.qc};
        cp {input.sample_sequences} {output.sample_sequences};
        cp {input.tree} {output.tree};
        """


rule test_nextclade:
    input:
        expand(
            "output/rsv_{{a_or_b}}/references/{{reference}}/versions/{timestamp}/files/tree.json",
            timestamp=timestamp,
        ),
    output:
        "test/{a_or_b}/{reference}/nextclade.aligned.fasta",
    params:
        indir=expand(
            "output/rsv_{{a_or_b}}/references/{{reference}}/versions/{timestamp}/files",
            timestamp=timestamp,
        ),
        outdir="test/{a_or_b}/{reference}",
    shell:
        """
        nextclade run \
            {params.indir}/sequences.fasta\
            --input-dataset={params.indir} \
            --output-all={params.outdir}\
            --output-tsv={params.outdir}/nextclade.tsv\
            --output-tree={params.outdir}/nextclade.auspice.json\
            --output-basename=nextclade 2>&1
        """
